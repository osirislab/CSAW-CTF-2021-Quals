def SmartAttack(P,Q,p):
    E = P.curve()
    Eqp = EllipticCurve(Qp(p, 2), [ ZZ(t) + randint(0,p)*p for t in E.a_invariants() ])

    P_Qps = Eqp.lift_x(ZZ(P.xy()[0]), all=True)
    for P_Qp in P_Qps:
        if GF(p)(P_Qp.xy()[1]) == P.xy()[1]:
            break

    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[0]), all=True)
    for Q_Qp in Q_Qps:
        if GF(p)(Q_Qp.xy()[1]) == Q.xy()[1]:
            break

    p_times_P = p*P_Qp
    p_times_Q = p*Q_Qp

    x_P,y_P = p_times_P.xy()
    x_Q,y_Q = p_times_Q.xy()

    phi_P = -(x_P/y_P)
    phi_Q = -(x_Q/y_Q)
    k = phi_Q/phi_P
    return ZZ(k)

# Curve parameters --> Replace the next three lines with given values
p = 9558257522396139784132260593079057982381441374299422002016893068428264098893905460151451891329476892769683253660765150267893051588776816163449446893896491
a = 8860319475583895318961610903288956470579871799249818016339667054896600673963145771527060118694301957455660423326159077605934740185088815719638618178908520
b = 2211045561931062733580331415731349972737174927574511576006761425800961452515465537581388168034413640106698522931913389935433170085637719591401176235873643

# Define curve
E = EllipticCurve(GF(p), [a, b])
assert(E.order() == p)

# Replace the next two lines with given values
P1 = E(8515604889858903399053946329068521915937883550196018066310891601068321536958122261865249210385129382723785101442464142817281344172973206558570043371701339, 1739545367603587360331721557886435545889395329087545755382909916596269104138573827642238083012353828101442503096092938031987155299483663103750548674389959)
P2 = E(8300499191172726514172153354812460422765232820371713132969812491969017157455212320755499893685869276425551008578745169381505926818774171193847352686926436, 753653916960633957481970965387067606529441362826222774225818750887406080781032724077539070864327209644828521818057577560259620708088632127058857965000417)

print(SmartAttack(P1,P2,p))
